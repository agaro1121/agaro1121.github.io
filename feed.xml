<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Hierro&#39;s Blog</title>
    <description>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.
</description>
    <link>http://yourdomain.com/</link>
    <atom:link href="http://yourdomain.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 29 Mar 2016 21:20:58 -0400</pubDate>
    <lastBuildDate>Tue, 29 Mar 2016 21:20:58 -0400</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>Welcome to Jekyll!</title>
        <description>&lt;p&gt;You’ll find this post in your &lt;code&gt;_posts&lt;/code&gt; directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run &lt;code&gt;jekyll serve&lt;/code&gt;, which launches a web server and auto-regenerates your site when a file is updated.&lt;/p&gt;

&lt;p&gt;To add new posts, simply add a file in the &lt;code&gt;_posts&lt;/code&gt; directory that follows the convention &lt;code&gt;YYYY-MM-DD-name-of-post.ext&lt;/code&gt; and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Tom&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints &amp;#39;Hi, Tom&amp;#39; to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Check out the &lt;a href=&quot;http://jekyllrb.com/docs/home&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://talk.jekyllrb.com/&quot;&gt;Jekyll Talk&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Mon, 14 Mar 2016 22:52:51 -0400</pubDate>
        <link>http://yourdomain.com/jekyll/update/2016/03/14/welcome-to-jekyll.html</link>
        <guid isPermaLink="true">http://yourdomain.com/jekyll/update/2016/03/14/welcome-to-jekyll.html</guid>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>Brief Sed &amp; Awk</title>
        <description>&lt;p&gt;Sed &lt;/p&gt;

&lt;p&gt;sed,from Stream EDitor, is a command that is used to perform transformations on text. It works from the command line and processes text via standard in and standard out. It does not modify the original input and does not save the output unless you redirect that output to a file&lt;/p&gt;

&lt;p&gt;Examples:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;sed sedcommand inputfile
sed -e sedcommand inputfile &lt;span class=&quot;c&quot;&gt;#does the same thing as above, except that it specifically denotes the command to run&lt;/span&gt;
sed -e sedcommand -e anothersedcommand inputfile
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Let’s say I want to change every instance of camel in the text file transportation.txt todune buggy.
Here is how to do that:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;sed -e &lt;span class=&quot;s1&quot;&gt;&amp;#39;s/camel/dune buggy/g&amp;#39;&lt;/span&gt; transportation.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;s=substitute
g=global(everywhere in the file)&lt;/p&gt;

&lt;p&gt;If I wanted to delete lines 4 through 17 in the file longtext.txt, I would do this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;sed -e &lt;span class=&quot;s1&quot;&gt;&amp;#39;4,17d&amp;#39;&lt;/span&gt; longtext.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can use other things in place of the line numbers such as regex&lt;/p&gt;

&lt;p&gt;Awk
A small programming language for processing strings. It takes in text, transforms it in whatever way you tell it to, and then outputs the transformed text.
The most common use of awk is to manipulate files that consist of fields separated by delimiters, such as a comma separated values (CSV) or a configuration file.&lt;/p&gt;

&lt;p&gt;What if we had a comma-delimited file containing names of things on my desk, a category for each, a color for each, and a date corresponding to the last time I picked that item up. 
That is 4 columns: name, category, color, and date. 
If I only really cared about the names and dates, then I could use awk to process the file quickly and list just these for me, like this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;awk -F&lt;span class=&quot;s1&quot;&gt;&amp;#39;,&amp;#39;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;{print $1, &amp;quot;was last picked up on&amp;quot;, $4}&amp;#39;&lt;/span&gt; deskstuff.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;-F defines the delimeter(&amp;#39;,&amp;#39;)&lt;/p&gt;

&lt;p&gt;You can define multiple delimiters:
-F&amp;#39;[;,-]&amp;#39;&lt;/p&gt;
</description>
        <pubDate>Sun, 28 Feb 2016 16:04:00 -0800</pubDate>
        <link>http://yourdomain.com/2016/02/28/brief-sed-awk.html</link>
        <guid isPermaLink="true">http://yourdomain.com/2016/02/28/brief-sed-awk.html</guid>
        
        <category>Unix</category>
        
        <category>Code</category>
        
        
      </item>
    
      <item>
        <title>Unix Command Line Tips &amp; Tricks</title>
        <description>&lt;p&gt;Below are some handy command line tips and tricks.You can read the rest with &amp;quot;Ubuntu Unleashed 2015 Edition&amp;quot;&lt;/p&gt;

&lt;p&gt;!! - Run last command&lt;/p&gt;

&lt;p&gt;For Example:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;Hierro &amp;gt; &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Saluton Mondo&amp;quot;&lt;/span&gt;
Saluton Mondo
Hierro &amp;gt; !!echo &lt;span class=&quot;s2&quot;&gt;&amp;quot;Saluton Mondo&amp;quot;&lt;/span&gt;
Saluton Mondo
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can even combine it with other commands.
For example:&lt;/p&gt;

&lt;p&gt;sudo !! will run sudo echo &amp;quot;Saluton Mondo&amp;quot;&lt;/p&gt;

&lt;p&gt;!(bang star) - This is a tricky one. This one will print out the last thing terminal spit out.
The below command will allow you nano the file from the ls command.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;Hierro &amp;gt; ls testFile2.txt
testFile2.txt
Hierro &amp;gt; nano !*
nano testFile2.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Used alone, it will print out the last thing in the terminal and use it as a command like below&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;    Hierro &amp;gt; &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;echo&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;    &lt;/span&gt;Hierro &amp;gt; !* &lt;span class=&quot;s2&quot;&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&amp;quot;echo&amp;quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;
    hello
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul class=&quot;mdlist&quot;&gt;
    &lt;li&gt;Ctrl+U  #erase the entire line&lt;/li&gt;
    &lt;li&gt;Ctrl+W  #erase word by word&lt;/li&gt;
    &lt;li&gt;Ctrl+A  #move your cursor to the beginning of the line&lt;/li&gt;
    &lt;li&gt;Ctrl+E  #move your cursor to the end of the line&lt;/li&gt;
    &lt;li&gt;Ctrl+K  #erase everything to the right of your cursor’s position&lt;/li&gt;
    &lt;li&gt;Ctrl+Y  #restore something you just deleted&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Chaining terminal commands:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;command1 &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; command2  &lt;span class=&quot;c&quot;&gt;# Runs commands consecutively&lt;/span&gt;
command1 &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; command2 &lt;span class=&quot;c&quot;&gt;# Runs command2 ONLY IF command1 runs successfully&lt;/span&gt;
command1 &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; command2 &lt;span class=&quot;c&quot;&gt;# Runs command2 ONLY IF command1 runs unsuccessfully&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If your system crashes: REISUB to the rescue: &lt;/p&gt;

&lt;p&gt;hold PrtSc+Alt and press REISUB in that order slowly&lt;/p&gt;

&lt;ul class=&quot;mdlist&quot;&gt;
    &lt;li&gt;R -&gt; unRaw      —&gt; Takes control of the keyboard back from the X server.&lt;/li&gt;
    &lt;li&gt;E -&gt; tErminate  —&gt; Sends a SIGTERM command to all processes, which allows time for the processes to terminate gracefully.&lt;/li&gt;
    &lt;li&gt;I -&gt; kIll       —&gt; Sends a SIGKILL to all processes, forcing any still running to terminate immediately.&lt;/li&gt;
    &lt;li&gt;S -&gt; Sync       —&gt; Flush data from memory to disk.&lt;/li&gt;
    &lt;li&gt;U -&gt; Unmount    —&gt; Unmount and remount all filesystems as read only.&lt;/li&gt;
    &lt;li&gt;B -&gt; reBoot     —&gt; Turn off and back on again, restarting the computer.&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Mon, 17 Aug 2015 15:51:00 -0700</pubDate>
        <link>http://yourdomain.com/2015/08/17/unix-tips-tricks.html</link>
        <guid isPermaLink="true">http://yourdomain.com/2015/08/17/unix-tips-tricks.html</guid>
        
        <category>Unix</category>
        
        <category>WhatILearnedToday</category>
        
        <category>Code</category>
        
        
      </item>
    
      <item>
        <title>The tar Command</title>
        <description>&lt;p&gt;Every day I like to learn something new, whether it&amp;#39;s big or small. Sometimes I take time to &amp;quot;relearn&amp;quot;
something and understand it in different, simpler ways so I don&amp;#39;t have to remember the small details. You&amp;#39;d be
surprised how much faster those small details come back when you know how everything fits together.&lt;/p&gt;

&lt;p&gt;On to what I learned !
Lately I&amp;#39;ve been experimenting with Linux(again). I installed an Ubunto Distro onto my rig and have been
learning the command line bit by bit.        &lt;/p&gt;

&lt;p&gt;The tar command
I&amp;#39;ve been using this command for years but had to google the syntax every single time.
That ends today !!!
What is tar?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It basically zips/unzips files.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;How to use it?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CODE EXAMPLE&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;tar &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;putflags here&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;newZipFileName.tgz&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;directory to zip up&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
tar &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;put flags here&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;newZipFileName.tgz&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Small things to know
tar has a few flags you always use&lt;/p&gt;

&lt;ul class=&quot;mdlist&quot;&gt;
    &lt;li&gt;x =&gt; extract files&lt;/li&gt;
    &lt;li&gt;c =&gt; create archive&lt;/li&gt;
    &lt;li&gt;t =&gt; list files&lt;/li&gt;
    &lt;li&gt;v =&gt; verbose (list files as it processes them)...shows you what&#39;s happening live&lt;/li&gt;
    &lt;li&gt;j =&gt; use bz2 compression&lt;/li&gt;
    &lt;li&gt;z =&gt; use gz compression&lt;/li&gt;
    &lt;li&gt;f =&gt; read or write files to disk.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;How to remember the small things?
- You always use the same flags to zip/unzip files except for one flag.&lt;/p&gt;

&lt;p&gt;Look at your keyboard. You have z,x,c,v,f in a nice L shape for you. Why did I have you do this?
    Because your tar command looks like this:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Zip&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;tar czvf ...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Unzip&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;-tar xzvf ...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As I promised same exact command except for the first flag z/x or create/extract LOL
The &lt;code&gt;z&lt;/code&gt; flag is interchangeable with the &lt;code&gt;j&lt;/code&gt; flag depending on the type of compression you&amp;#39;re working with.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Zip&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;tar cjvf ...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Unzip&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;tar xjvf ...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Code Samples&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;tar czvf testZipFile.tar.gz myDir/
tar xzvf testZipFile.tar.gz
tar cjvf testZipFile.tar.bz2 myDir/
tar xjvf testZipFile.tar.bz2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;BTW: To simply view what&amp;#39;s in your compressed file&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;tar tzvf testZipFile.tar.gz
tar tjvf testZipFile.tar.bz2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        <pubDate>Wed, 12 Aug 2015 08:17:00 -0700</pubDate>
        <link>http://yourdomain.com/2015/08/12/the-tar-command.html</link>
        <guid isPermaLink="true">http://yourdomain.com/2015/08/12/the-tar-command.html</guid>
        
        <category>Unix</category>
        
        <category>WhatILearnedToday</category>
        
        <category>Code</category>
        
        
      </item>
    
      <item>
        <title>First Post</title>
        <description>&lt;h2&gt;Greetings&lt;/h2&gt;This is the first post of many hopefully&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;</description>
        <pubDate>Sat, 14 Mar 2015 11:06:00 -0700</pubDate>
        <link>http://yourdomain.com/2015/03/14/blog-post.html</link>
        <guid isPermaLink="true">http://yourdomain.com/2015/03/14/blog-post.html</guid>
        
        <category>SalutonMondo</category>
        
        
      </item>
    
  </channel>
</rss>
